{"name":"Grunt-livereload-demo","tagline":"a simple demo using grunt to enable livereload and jshint in the front-end","body":"# grunt-livereload-demo\r\na simple demo using grunt to enable livereload and jshint in the front-end\r\n\r\n###plugins\r\n* [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\r\n  : establish a server to watch the changes\r\n* [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\r\n  : watch the changes and do tasks on changing\r\n* [grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint)\r\n  : check the js files and detect the errors\r\n* [grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify)\r\n  : compress the js files\r\n* [grunt-contrib-cssmin](https://github.com/gruntjs/grunt-contrib-cssmin)\r\n: compress the css files\r\n* [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks)\r\n  : one line(```require('load-grunt-tasks')(grunt);```)the load all the tasks\r\n\r\n###instructions\r\nfirst get the code and install the plugins:\r\n```\r\n  git clone https://github.com/helicese/grunt-livereload-demo\r\n  cd grunt-livereload-demo\r\n  npm install\r\n```\r\nthen:\r\n* ```grunt```: to start the server and run the watch task\r\n* ```grunt cssmin```: compress the css file\r\n* ```grunt uglify```: compress the js file\r\n\r\n###tips\r\n  > This details really cost me a lot of time\r\n  \r\n* Do not registe Task for the loaded plugins, which will make it unusable\r\n* in the path, there is no '/' at the beginning.\r\n* to enable livereload, a [livereload plugin](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei) of the browser is needed and make sure it is switched on(the center circle of the icon be filled).\r\n\r\n###references:\r\n[http://www.gruntjs.net/](http://www.gruntjs.net/)\r\n\r\n[http://bellyang.com/blog/post-606.html](http://bellyang.com/blog/post-606.html)\r\n\r\n------\r\n# grunt使用心得\r\n##Reference\r\n* [grunt系列博客](http://www.cnblogs.com/tarol/category/643890.html)： 非常详细～\r\n* [grunt之connect,watch](http://www.cnblogs.com/tarol/p/4242360.html)\r\n* [grunt之watch续](http://www.cnblogs.com/tarol/p/4253787.html)\r\n\r\n##files：\r\n+ 三种格式：\r\n```\r\n//第一种，文件数组格式，满足所有要求；\r\n//对应多个src-dest文件映射，也可添加额外的属性值\r\nfiles: [\r\n        {src: ['src/bb.js', 'src/bbb.js'], dest: 'dest/b/', nonull: true},\r\n        {src: ['src/bb1.js', 'src/bbb1.js'], dest: 'dest/b1/', filter: 'isFile'},\r\n      ],\r\n      \r\n//第二种，文件对象格式，无法设置其他参数\r\n//属性名就是目标文件，源文件就是它的值(源文件列表则使用数组格式声明)\r\nfiles : {\r\n    'dest/hello.js' ： ['src/*.js']\r\n}\r\n\r\n//第三种，简洁格式，只能设置单个任务，可添加额外属性，\r\n//连file属性名都不用写，直接dest和src\r\ndest : 'dest/hello.js',\r\nsrc : ['src/*.js']\r\n```\r\n\r\n+ 通配符：\r\n    + \\*：匹配任意数量的字符，不包括/。\r\n    + ?：匹配单个字符，不包括/。\r\n    + **：匹配任意数量的字符，包括/。\r\n    + {}：允许使用逗号分隔的列表，表示“or”（或）关系。\r\n    + !：用于模式的开头，表示只返回不匹配的情况。\r\n+ 动态构建文件对象：\r\n```\r\n    files: [\r\n        {\r\n          expand: true,     // Enable dynamic expansion.\r\n          cwd: 'lib/',      // Src matches are relative to this path.\r\n          src: ['**/*.js'], // Actual pattern(s) to match.\r\n          dest: 'build/',   // Destination path prefix.\r\n          ext: '.min.js',   // Dest filepaths will have this extension.\r\n          extDot: 'first'   // Extensions in filenames begin after the first dot\r\n        },\r\n      ], \r\n```\r\n\r\n##[grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect)\r\n> Run this task with the ```grunt connect``` command.\r\n\r\n> Note that this server only runs as long as grunt is running. Once grunt's tasks have completed, the web server stops. This behavior can be changed with the *keepalive* option, and can be enabled ad-hoc by running the task like ```grunt connect:keepalive```.\r\n\r\n> This task was designed to be used in conjunction with another task that is run immediately afterwards, like the *grunt-contrib-qunit plugin* ```qunit``` task.\r\n\r\n* 功能：搭建一个本地connect服务器，使得livereload时并不需要借用其他工具来搭建服务器；\r\n* opinions:\r\n    * hostname: 默认'0.0.0.0',只要能和本机ping通都能访问,设定为'localhost'则只有本机能够访问\r\n    * base: 静态服务器文件根目录,支持String, Array, Object;\r\n    * keepalive: 默认为false,结果是运行结果服务器开启之后瞬间就关闭了(用于测试),将此opinion设置为true能让服务器一直运行下去,要注意keepalive会阻塞接下来的grunt任务,要谨慎使用;\r\n    * livereload: 依赖于浏览器的livereload插件,只有和watch配合使用才有效果\r\n* Tips：\r\n    * 根目录中有index.html时,访问服务器会直接链接到index.html,若没有index.html,则看到的是根目录下的目录结构(connect做得比较细腻的部分)\r\n    * base的value为数组时,数组内为多个目录,若都有index.html,则文件索引为前面的文件夹优先级更高,若没index.html则文件夹索引为后面的文件夹优先级更高\r\n    * 实现livereload时,keepalive应设置为false,由于watch的存在,grunt会一直处于执行状态,所以服务器不会终止,而keepalive若为true,则connect会一直阻塞,watch不会执行,livereload失败.\r\n我的配置：\r\n```\r\n    connect: {\r\n      options: {\r\n        open: true,//let the browser run automatically\r\n        port: 8000,\r\n        hostname: 'localhost',//only this machine can access to the server\r\n        livereload: 35729//the port for the watch task\r\n      },\r\n      server: {\r\n        options: {\r\n          //base define the root directory of the server, default to be the root where Gruntfile.js exists.\r\n          base: [\r\n            'views' //the base path\r\n          ]\r\n        }\r\n      }\r\n    },\r\n```\r\n\r\n##[grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\r\n+ 功能： 监控文件变化，做出相关反应；\r\n+ opinions：\r\n    * spawn: 链接里讲的很详细，不过我觉得没什么必要，直接设置成false就好；\r\n> 如果你的Gruntfile.js中读取了输入命令的部分值并保存为变量，请将此option设置为false，不然watch启动的task中将读取不到这些变量。\r\n\r\n* 我的配置：\r\n```\r\n    watch:{\r\n      javascript: {\r\n        files: ['views/js/*.js', 'views/css/*.css','views/main.html'],\r\n        tasks: ['jshint'],\r\n        options: {\r\n          spawn: false,//speed up the watch task\r\n          livereload: '<%= connect.options.livereload %>'\r\n        },\r\n      },\r\n      gruntfile: {\r\n        files: 'Gruntfile.js',\r\n        tasks: ['jshint'],\r\n        options: {\r\n          reload: true,\r\n          spawn: false\r\n        },\r\n      }\r\n    },\r\n```\r\n* 说明：这个plugin有两个task，javascript负责监控js文件变化并调用jshint工具来检测语法，gruntfile负责监测Gruntfile.js的变化，在变化后重启grunt任务。\r\n\r\n##[grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint)\r\n功能： 检测javascript语法～\r\n这个插件算是jshint工具的一个分支吧，很多内容可以参考[jsHint](http://jshint.com/)官网,[这里](https://github.com/jshint/jshint/blob/master/examples/.jshintrc)包含了常用的配置清单，可以根据这里的内容来配置出属于自己的jshint。\r\n我的配置：\r\n```\r\njshint:{\r\n  opinions:{\r\n    eqeqeq: true, //要用严格相等运算符取代相等运算符\r\n    trailing: true, //行尾不得有多余的空格\r\n  },\r\n  src: ['views/js/*.js','*.js']\r\n}\r\n```\r\n\r\n##[grunt-contrib-cssmin](https://github.com/gruntjs/grunt-contrib-cssmin)\r\n功能：压缩，合并css代码\r\n我的配置：\r\n```\r\ncssmin:{\r\n    minify: {\r\n        expand: true,\r\n        cwd: 'views/css/',\r\n        src: ['*.css', '!*.min.css'],\r\n        dest: 'views/dest/css/',\r\n        ext: '.min.css'\r\n    },\r\n}\r\n```\r\n\r\n##[grunt-contrib-uglify](https://github.com/gruntjs/grunt-contrib-uglify)\r\n功能：压缩javascript文件\r\n我的配置：\r\n```\r\nuglify: {\r\n  options: {\r\n     banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\r\n  },\r\n  build: {\r\n    expand: true,\r\n    cwd: 'views/js',\r\n    src: ['*.js', '!*.min.js'],\r\n    dest: 'views/dest/js',\r\n    ext: '.min.js'\r\n  }\r\n},\r\n```\r\n---\r\n- 李辉   \r\n- helicese@gmail.com\r\n- 热爱学习的前端小兵,欢迎交流讨论\r\n- 2015.8.7\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}